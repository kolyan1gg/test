import asyncio
from datetime import datetime
import logging
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters.command import Command
from config_reader import config
from aiogram import F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile, URLInputFile, BufferedInputFile

from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InlineKeyboardButton, KeyboardBuilder


# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=config.bot_token.get_secret_value()) 

# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()
dp["started_at"] = datetime.now().strftime("%Y-%m-%d %H:%M")

# –†–æ—É—Ç–µ—Ä
router = Router()

dp.include_router(router)


# New code
from short_model import get_categories
new_images = []

from aiogram.filters import Command
from aiogram.types import FSInputFile, Message
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.utils.keyboard import ReplyKeyboardBuilder

@dp.message(Command("special_buttons"))
async def cmd_special_buttons(message: types.Message):
    builder = ReplyKeyboardBuilder()
    # –º–µ—Ç–æ–¥ row –ø–æ–∑–≤–æ–ª—è–µ—Ç —è–≤–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ä—è–¥
    # –∏–∑ –æ–¥–Ω–æ–π –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫. –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–≤—ã–π —Ä—è–¥
    # –±—É–¥–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –¥–≤—É—Ö –∫–Ω–æ–ø–æ–∫...
    builder.row(
        types.KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True),
        types.KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)
    )
    # ... –≤—Ç–æ—Ä–æ–π –∏–∑ –æ–¥–Ω–æ–π ...
    builder.row(types.KeyboardButton(
        text="–°–æ–∑–¥–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É",
        request_poll=types.KeyboardButtonPollType(type="quiz"))
    )
    # ... –∞ —Ç—Ä–µ—Ç–∏–π —Å–Ω–æ–≤–∞ –∏–∑ –¥–≤—É—Ö
    builder.row(
        types.KeyboardButton(
            text="–í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            request_user=types.KeyboardButtonRequestUser(
                request_id=1,
                user_is_premium=True
            )
        ),
        types.KeyboardButton(
            text="–í—ã–±—Ä–∞—Ç—å —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É —Å —Ñ–æ—Ä—É–º–∞–º–∏",
            request_chat=types.KeyboardButtonRequestChat(
                request_id=2,
                chat_is_channel=False,
                chat_is_forum=True
            )
        )
    )
    # WebApp-–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç, —Å–æ—Ä—Ä–∏ :(

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(resize_keyboard=True),
    )
@dp.message(Command("album"))
async def cmd_album(message: Message):
    album_builder = MediaGroupBuilder(
        caption="–û–±—â–∞—è –ø–æ–¥–ø–∏—Å—å –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∞–ª—å–±–æ–º–∞"
    )
    album_builder.add(
        type="photo",
        media=FSInputFile("image_from_pc.jpg")
        # caption="–ü–æ–¥–ø–∏—Å—å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –º–µ–¥–∏–∞"

    )
    # –ï—Å–ª–∏ –º—ã —Å—Ä–∞–∑—É –∑–Ω–∞–µ–º —Ç–∏–ø, —Ç–æ –≤–º–µ—Å—Ç–æ –æ–±—â–µ–≥–æ add
    # –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞—Ç—å add_<—Ç–∏–ø>
    album_builder.add_photo(
        # –î–ª—è —Å—Å—ã–ª–æ–∫ –∏–ª–∏ file_id –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–∞–∑—É —É–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
        media="https://picsum.photos/seed/groosha/400/300"
    )
    album_builder.add_photo(
        media="AgACAgIAAxkDAAMIZYGKISIjylV7sEfb23im0GEzqn8AAmLPMRvphwlIWXLl0_ISWp8BAAMCAAN4AAMzBA"
    )
    await message.answer_media_group(
        # –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–∑–≤–∞—Ç—å build()
        media=album_builder.build()
    )

@dp.message(Command('images'))
async def upload_photo(message: Message):
    # –°—é–¥–∞ –±—É–¥–µ–º –ø–æ–º–µ—â–∞—Ç—å file_id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –∏–º–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
    file_ids = []

    # –ß—Ç–æ–±—ã –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å BufferedInputFile, –≤–æ—Å–ø–æ–ª—å–∑—É–µ–º—Å—è "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º"
    # –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ `open()`. –ù–æ, –≤–æ–æ–±—â–µ –≥–æ–≤–æ—Ä—è, —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–±
    # –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞–π—Ç–æ–≤ –∏–∑ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
    # –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–∞–∫–∏—Ö-–ª–∏–±–æ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —á–µ—Ä–µ–∑ Pillow
    with open("image_from_pc.jpg", "rb") as image_from_buffer:
        result = await message.answer_photo(
            BufferedInputFile(
                image_from_buffer.read(),
                filename="image from buffer.jpg"
            ),
            caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –±—É—Ñ–µ—Ä–∞"
        )
        file_ids.append(result.photo[-1].file_id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    image_from_pc = FSInputFile("image_from_pc.jpg")
    result = await message.answer_photo(
        image_from_pc,
        caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ"
    )
    file_ids.append(result.photo[-1].file_id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ —Å—Å—ã–ª–∫–µ
    image_from_url = URLInputFile("https://picsum.photos/seed/groosha/400/300")
    result = await message.answer_photo(
        image_from_url,
        caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ"
    )
    file_ids.append(result.photo[-1].file_id)
    await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n"+"\n".join(file_ids))


@dp.message(F.photo)
async def download_photo(message: Message, bot: Bot):
    await bot.download(
        message.photo[-1],
        destination=f"/tmp/{message.photo[-1].file_id}.jpg" # Linux
        # destination=f"./tmp/{message.photo[-1].file_id}.jpg" # Windows

    )
    await message.answer(
        f"Hello, <b>{message.from_user.full_name}</b>, images saved",
        parse_mode=ParseMode.HTML
    )

    '''
    # Create InlineKeyboard
    markup = InlineKeyboardMarkup()
    button1 = InlineKeyboardButton("Option 1", callback_data='button1')
    button2 = InlineKeyboardButton("Option 2", callback_data='button2')
    markup.add(button1, button2)
    '''

    def genmarkup(data):
        builder = KeyboardBuilder()
        for i in data:
            button = InlineKeyboardButton(text=i[1], callback_data=i[2])
            builder.add(button)
        return builder.as_markup()

    # Create InlineKeyboard
    markup = genmarkup(['button1', 'button2', 'button3'])

    # Send a message with the buttons
    await message.answer("Choose an option:", reply_markup=markup)

    
    new_image = f"/tmp/{message.photo[-1].file_id}.jpg" # Linux
    # new_image = f"./tmp/{message.photo[-1].file_id}.jpg" # Windows
    new_images.append(new_image)
    print(new_images)
    await message.answer(
        f"New image saved: <b> {new_image}</b>",
        parse_mode=ParseMode.HTML
    )
    await message.answer(
        str(get_categories(new_image)),
        parse_mode=ParseMode.HTML
    )


@router.callback_query(lambda c: c.data.startswith('button'))
async def process_callback_button(callback_query: types.CallbackQuery):
    await callback_query.bot.answer_callback_query(callback_query.id)
    _, button_type, new_image = callback_query.data.split('_')

    if button_type == 'button1':
        response = str(get_categories(new_image))
    else:
        response = str(get_categories2(new_image))

    await callback_query.message.answer(response, parse_mode=types.ParseMode.HTML)

@dp.message(F.sticker)
async def download_sticker(message: Message, bot: Bot):
    await bot.download(
        message.sticker,
        # –¥–ª—è Windows –ø—É—Ç–∏ –Ω–∞–¥–æ –ø–æ–¥–ø—Ä–∞–≤–∏—Ç—å
        destination=f"./tmp/{message.sticker.file_id}.webp"
    )


@dp.message(Command("hello"))
async def cmd_hello(message: Message):
    await message.answer(
        f"Hello, <b>{message.from_user.full_name}</b>",
        parse_mode=ParseMode.HTML
    )

@dp.message(F.text, Command("test"))
async def any_message(message: Message):
    await message.answer(
        "Hello, <b>worldd</b>!",
        parse_mode=ParseMode.HTML
    )
    await message.answer(
        "Hello, *world*\!",
        parse_mode=ParseMode.MARKDOWN_V2
    )


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("Hello!")

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test1
@dp.message(Command("test1"))
async def cmd_test1(message: types.Message):
    await message.reply("Test 1")

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test2
@dp.message(Command("test2"))
async def cmd_test2(message: types.Message):
    await message.reply("Test 2")

@dp.message(Command("dice"))
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")


@dp.message(Command("add_to_list"))
async def cmd_add_to_list(message: types.Message, mylist: list[int]):
    mylist.append(7)
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ —á–∏—Å–ª–æ 7")


@dp.message(Command("show_list"))
async def cmd_show_list(message: types.Message, mylist: list[int]):
    await message.answer(f"–í–∞—à —Å–ø–∏—Å–æ–∫: {mylist}")


@dp.message(Command("info"))
async def cmd_info(message: types.Message, started_at: str):
    await message.answer(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω {started_at}")
# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot, mylist=[1, 2, 3])

if __name__ == "__main__":
    asyncio.run(main())
